// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package edu.brynmawr.cmsc353.webapp;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.Utils;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

public final class GetBoardsInput implements InputType {
  private final Input<Integer> limit;

  private final Input<Integer> offset;

  private final Input<Object> createdAtBefore;

  private final Input<Object> createdAtAfter;

  private final Input<Object> updatedAtBefore;

  private final Input<Object> updatedAtAfter;

  private final Input<String> nameStartsWith;

  private final Input<String> nameEndsWith;

  private final Input<String> nameContains;

  private final Input<String> descriptionStartsWith;

  private final Input<String> descriptionEndsWith;

  private final Input<String> descriptionContains;

  private final Input<Integer> usersCountLte;

  private final Input<Integer> usersCountGte;

  private final Input<Boolean> isRemoved;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  GetBoardsInput(Input<Integer> limit, Input<Integer> offset, Input<Object> createdAtBefore,
      Input<Object> createdAtAfter, Input<Object> updatedAtBefore, Input<Object> updatedAtAfter,
      Input<String> nameStartsWith, Input<String> nameEndsWith, Input<String> nameContains,
      Input<String> descriptionStartsWith, Input<String> descriptionEndsWith,
      Input<String> descriptionContains, Input<Integer> usersCountLte, Input<Integer> usersCountGte,
      Input<Boolean> isRemoved) {
    this.limit = limit;
    this.offset = offset;
    this.createdAtBefore = createdAtBefore;
    this.createdAtAfter = createdAtAfter;
    this.updatedAtBefore = updatedAtBefore;
    this.updatedAtAfter = updatedAtAfter;
    this.nameStartsWith = nameStartsWith;
    this.nameEndsWith = nameEndsWith;
    this.nameContains = nameContains;
    this.descriptionStartsWith = descriptionStartsWith;
    this.descriptionEndsWith = descriptionEndsWith;
    this.descriptionContains = descriptionContains;
    this.usersCountLte = usersCountLte;
    this.usersCountGte = usersCountGte;
    this.isRemoved = isRemoved;
  }

  public @Nullable Integer limit() {
    return this.limit.value;
  }

  public @Nullable Integer offset() {
    return this.offset.value;
  }

  public @Nullable Object createdAtBefore() {
    return this.createdAtBefore.value;
  }

  public @Nullable Object createdAtAfter() {
    return this.createdAtAfter.value;
  }

  public @Nullable Object updatedAtBefore() {
    return this.updatedAtBefore.value;
  }

  public @Nullable Object updatedAtAfter() {
    return this.updatedAtAfter.value;
  }

  public @Nullable String nameStartsWith() {
    return this.nameStartsWith.value;
  }

  public @Nullable String nameEndsWith() {
    return this.nameEndsWith.value;
  }

  public @Nullable String nameContains() {
    return this.nameContains.value;
  }

  public @Nullable String descriptionStartsWith() {
    return this.descriptionStartsWith.value;
  }

  public @Nullable String descriptionEndsWith() {
    return this.descriptionEndsWith.value;
  }

  public @Nullable String descriptionContains() {
    return this.descriptionContains.value;
  }

  public @Nullable Integer usersCountLte() {
    return this.usersCountLte.value;
  }

  public @Nullable Integer usersCountGte() {
    return this.usersCountGte.value;
  }

  public @Nullable Boolean isRemoved() {
    return this.isRemoved.value;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public InputFieldMarshaller marshaller() {
    return new InputFieldMarshaller() {
      @Override
      public void marshal(InputFieldWriter writer) throws IOException {
        if (limit.defined) {
          writer.writeInt("limit", limit.value);
        }
        if (offset.defined) {
          writer.writeInt("offset", offset.value);
        }
        if (createdAtBefore.defined) {
          writer.writeCustom("createdAtBefore",CustomType.DATETIME, createdAtBefore.value != null ? createdAtBefore.value : null);
        }
        if (createdAtAfter.defined) {
          writer.writeCustom("createdAtAfter", CustomType.DATETIME, createdAtAfter.value != null ? createdAtAfter.value : null);
        }
        if (updatedAtBefore.defined) {
          writer.writeCustom("updatedAtBefore", CustomType.DATETIME, updatedAtBefore.value != null ? updatedAtBefore.value : null);
        }
        if (updatedAtAfter.defined) {
          writer.writeCustom("updatedAtAfter", CustomType.DATETIME, updatedAtAfter.value != null ? updatedAtAfter.value : null);
        }
        if (nameStartsWith.defined) {
          writer.writeString("nameStartsWith", nameStartsWith.value);
        }
        if (nameEndsWith.defined) {
          writer.writeString("nameEndsWith", nameEndsWith.value);
        }
        if (nameContains.defined) {
          writer.writeString("nameContains", nameContains.value);
        }
        if (descriptionStartsWith.defined) {
          writer.writeString("descriptionStartsWith", descriptionStartsWith.value);
        }
        if (descriptionEndsWith.defined) {
          writer.writeString("descriptionEndsWith", descriptionEndsWith.value);
        }
        if (descriptionContains.defined) {
          writer.writeString("descriptionContains", descriptionContains.value);
        }
        if (usersCountLte.defined) {
          writer.writeInt("usersCountLte", usersCountLte.value);
        }
        if (usersCountGte.defined) {
          writer.writeInt("usersCountGte", usersCountGte.value);
        }
        if (isRemoved.defined) {
          writer.writeBoolean("isRemoved", isRemoved.value);
        }
      }
    };
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= limit.hashCode();
      h *= 1000003;
      h ^= offset.hashCode();
      h *= 1000003;
      h ^= createdAtBefore.hashCode();
      h *= 1000003;
      h ^= createdAtAfter.hashCode();
      h *= 1000003;
      h ^= updatedAtBefore.hashCode();
      h *= 1000003;
      h ^= updatedAtAfter.hashCode();
      h *= 1000003;
      h ^= nameStartsWith.hashCode();
      h *= 1000003;
      h ^= nameEndsWith.hashCode();
      h *= 1000003;
      h ^= nameContains.hashCode();
      h *= 1000003;
      h ^= descriptionStartsWith.hashCode();
      h *= 1000003;
      h ^= descriptionEndsWith.hashCode();
      h *= 1000003;
      h ^= descriptionContains.hashCode();
      h *= 1000003;
      h ^= usersCountLte.hashCode();
      h *= 1000003;
      h ^= usersCountGte.hashCode();
      h *= 1000003;
      h ^= isRemoved.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof GetBoardsInput) {
      GetBoardsInput that = (GetBoardsInput) o;
      return this.limit.equals(that.limit)
       && this.offset.equals(that.offset)
       && this.createdAtBefore.equals(that.createdAtBefore)
       && this.createdAtAfter.equals(that.createdAtAfter)
       && this.updatedAtBefore.equals(that.updatedAtBefore)
       && this.updatedAtAfter.equals(that.updatedAtAfter)
       && this.nameStartsWith.equals(that.nameStartsWith)
       && this.nameEndsWith.equals(that.nameEndsWith)
       && this.nameContains.equals(that.nameContains)
       && this.descriptionStartsWith.equals(that.descriptionStartsWith)
       && this.descriptionEndsWith.equals(that.descriptionEndsWith)
       && this.descriptionContains.equals(that.descriptionContains)
       && this.usersCountLte.equals(that.usersCountLte)
       && this.usersCountGte.equals(that.usersCountGte)
       && this.isRemoved.equals(that.isRemoved);
    }
    return false;
  }

  public static final class Builder {
    private Input<Integer> limit = Input.absent();

    private Input<Integer> offset = Input.absent();

    private Input<Object> createdAtBefore = Input.absent();

    private Input<Object> createdAtAfter = Input.absent();

    private Input<Object> updatedAtBefore = Input.absent();

    private Input<Object> updatedAtAfter = Input.absent();

    private Input<String> nameStartsWith = Input.absent();

    private Input<String> nameEndsWith = Input.absent();

    private Input<String> nameContains = Input.absent();

    private Input<String> descriptionStartsWith = Input.absent();

    private Input<String> descriptionEndsWith = Input.absent();

    private Input<String> descriptionContains = Input.absent();

    private Input<Integer> usersCountLte = Input.absent();

    private Input<Integer> usersCountGte = Input.absent();

    private Input<Boolean> isRemoved = Input.absent();

    Builder() {
    }

    public Builder limit(@Nullable Integer limit) {
      this.limit = Input.fromNullable(limit);
      return this;
    }

    public Builder offset(@Nullable Integer offset) {
      this.offset = Input.fromNullable(offset);
      return this;
    }

    public Builder createdAtBefore(@Nullable Object createdAtBefore) {
      this.createdAtBefore = Input.fromNullable(createdAtBefore);
      return this;
    }

    public Builder createdAtAfter(@Nullable Object createdAtAfter) {
      this.createdAtAfter = Input.fromNullable(createdAtAfter);
      return this;
    }

    public Builder updatedAtBefore(@Nullable Object updatedAtBefore) {
      this.updatedAtBefore = Input.fromNullable(updatedAtBefore);
      return this;
    }

    public Builder updatedAtAfter(@Nullable Object updatedAtAfter) {
      this.updatedAtAfter = Input.fromNullable(updatedAtAfter);
      return this;
    }

    public Builder nameStartsWith(@Nullable String nameStartsWith) {
      this.nameStartsWith = Input.fromNullable(nameStartsWith);
      return this;
    }

    public Builder nameEndsWith(@Nullable String nameEndsWith) {
      this.nameEndsWith = Input.fromNullable(nameEndsWith);
      return this;
    }

    public Builder nameContains(@Nullable String nameContains) {
      this.nameContains = Input.fromNullable(nameContains);
      return this;
    }

    public Builder descriptionStartsWith(@Nullable String descriptionStartsWith) {
      this.descriptionStartsWith = Input.fromNullable(descriptionStartsWith);
      return this;
    }

    public Builder descriptionEndsWith(@Nullable String descriptionEndsWith) {
      this.descriptionEndsWith = Input.fromNullable(descriptionEndsWith);
      return this;
    }

    public Builder descriptionContains(@Nullable String descriptionContains) {
      this.descriptionContains = Input.fromNullable(descriptionContains);
      return this;
    }

    public Builder usersCountLte(@Nullable Integer usersCountLte) {
      this.usersCountLte = Input.fromNullable(usersCountLte);
      return this;
    }

    public Builder usersCountGte(@Nullable Integer usersCountGte) {
      this.usersCountGte = Input.fromNullable(usersCountGte);
      return this;
    }

    public Builder isRemoved(@Nullable Boolean isRemoved) {
      this.isRemoved = Input.fromNullable(isRemoved);
      return this;
    }

    public Builder limitInput(@NotNull Input<Integer> limit) {
      this.limit = Utils.checkNotNull(limit, "limit == null");
      return this;
    }

    public Builder offsetInput(@NotNull Input<Integer> offset) {
      this.offset = Utils.checkNotNull(offset, "offset == null");
      return this;
    }

    public Builder createdAtBeforeInput(@NotNull Input<Object> createdAtBefore) {
      this.createdAtBefore = Utils.checkNotNull(createdAtBefore, "createdAtBefore == null");
      return this;
    }

    public Builder createdAtAfterInput(@NotNull Input<Object> createdAtAfter) {
      this.createdAtAfter = Utils.checkNotNull(createdAtAfter, "createdAtAfter == null");
      return this;
    }

    public Builder updatedAtBeforeInput(@NotNull Input<Object> updatedAtBefore) {
      this.updatedAtBefore = Utils.checkNotNull(updatedAtBefore, "updatedAtBefore == null");
      return this;
    }

    public Builder updatedAtAfterInput(@NotNull Input<Object> updatedAtAfter) {
      this.updatedAtAfter = Utils.checkNotNull(updatedAtAfter, "updatedAtAfter == null");
      return this;
    }

    public Builder nameStartsWithInput(@NotNull Input<String> nameStartsWith) {
      this.nameStartsWith = Utils.checkNotNull(nameStartsWith, "nameStartsWith == null");
      return this;
    }

    public Builder nameEndsWithInput(@NotNull Input<String> nameEndsWith) {
      this.nameEndsWith = Utils.checkNotNull(nameEndsWith, "nameEndsWith == null");
      return this;
    }

    public Builder nameContainsInput(@NotNull Input<String> nameContains) {
      this.nameContains = Utils.checkNotNull(nameContains, "nameContains == null");
      return this;
    }

    public Builder descriptionStartsWithInput(@NotNull Input<String> descriptionStartsWith) {
      this.descriptionStartsWith = Utils.checkNotNull(descriptionStartsWith, "descriptionStartsWith == null");
      return this;
    }

    public Builder descriptionEndsWithInput(@NotNull Input<String> descriptionEndsWith) {
      this.descriptionEndsWith = Utils.checkNotNull(descriptionEndsWith, "descriptionEndsWith == null");
      return this;
    }

    public Builder descriptionContainsInput(@NotNull Input<String> descriptionContains) {
      this.descriptionContains = Utils.checkNotNull(descriptionContains, "descriptionContains == null");
      return this;
    }

    public Builder usersCountLteInput(@NotNull Input<Integer> usersCountLte) {
      this.usersCountLte = Utils.checkNotNull(usersCountLte, "usersCountLte == null");
      return this;
    }

    public Builder usersCountGteInput(@NotNull Input<Integer> usersCountGte) {
      this.usersCountGte = Utils.checkNotNull(usersCountGte, "usersCountGte == null");
      return this;
    }

    public Builder isRemovedInput(@NotNull Input<Boolean> isRemoved) {
      this.isRemoved = Utils.checkNotNull(isRemoved, "isRemoved == null");
      return this;
    }

    public GetBoardsInput build() {
      return new GetBoardsInput(limit, offset, createdAtBefore, createdAtAfter, updatedAtBefore, updatedAtAfter, nameStartsWith, nameEndsWith, nameContains, descriptionStartsWith, descriptionEndsWith, descriptionContains, usersCountLte, usersCountGte, isRemoved);
    }
  }
}
