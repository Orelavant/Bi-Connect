package edu.brynmawr.cmsc353.webapp;// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//

import com.apollographql.apollo.api.Operation;
import com.apollographql.apollo.api.OperationName;
import com.apollographql.apollo.api.Query;
import com.apollographql.apollo.api.Response;
import com.apollographql.apollo.api.ResponseField;
import com.apollographql.apollo.api.ScalarTypeAdapters;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer;
import com.apollographql.apollo.api.internal.QueryDocumentMinifier;
import com.apollographql.apollo.api.internal.ResponseFieldMapper;
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller;
import com.apollographql.apollo.api.internal.ResponseReader;
import com.apollographql.apollo.api.internal.ResponseWriter;
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser;
import com.apollographql.apollo.api.internal.UnmodifiableMapBuilder;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;

public final class GetPostsQuery implements Query<GetPostsQuery.Data, GetPostsQuery.Data, GetPostsQuery.Variables> {
  public static final String OPERATION_ID = "0911b289392a994dd4616fd6584247c61620f885959489af802500d737a7ad93";

  public static final String QUERY_DOCUMENT = QueryDocumentMinifier.minify(
    "query getPosts($input: GetPostsInput!) {\n"
        + "  getPosts(input: $input) {\n"
        + "    __typename\n"
        + "    _id\n"
        + "    creatorName\n"
        + "    title\n"
        + "    content\n"
        + "    boardName\n"
        + "  }\n"
        + "}"
  );

  public static final OperationName OPERATION_NAME = new OperationName() {
    @Override
    public String name() {
      return "getPosts";
    }
  };

  private final Variables variables;

  public GetPostsQuery(@NotNull GetPostsInput input) {
    Utils.checkNotNull(input, "input == null");
    variables = new Variables(input);
  }

  @Override
  public String operationId() {
    return OPERATION_ID;
  }

  @Override
  public String queryDocument() {
    return QUERY_DOCUMENT;
  }

  @Override
  public Data wrapData(Data data) {
    return data;
  }

  @Override
  public Variables variables() {
    return variables;
  }

  @Override
  public ResponseFieldMapper<Data> responseFieldMapper() {
    return new Data.Mapper();
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public OperationName name() {
    return OPERATION_NAME;
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final BufferedSource source,
                              @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final ByteString byteString,
                              @NotNull final ScalarTypeAdapters scalarTypeAdapters) throws IOException {
    return parse(new Buffer().write(byteString), scalarTypeAdapters);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final BufferedSource source) throws
      IOException {
    return parse(source, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public Response<Data> parse(@NotNull final ByteString byteString) throws
      IOException {
    return parse(byteString, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(@NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, false, true, scalarTypeAdapters);
  }

  @NotNull
  @Override
  public ByteString composeRequestBody() {
    return OperationRequestBodyComposer.compose(this, false, true, ScalarTypeAdapters.DEFAULT);
  }

  @Override
  @NotNull
  public ByteString composeRequestBody(final boolean autoPersistQueries,
      final boolean withQueryDocument, @NotNull final ScalarTypeAdapters scalarTypeAdapters) {
    return OperationRequestBodyComposer.compose(this, autoPersistQueries, withQueryDocument, scalarTypeAdapters);
  }

  public static final class Builder {
    private @NotNull GetPostsInput input;

    Builder() {
    }

    public Builder input(@NotNull GetPostsInput input) {
      this.input = input;
      return this;
    }

    public GetPostsQuery build() {
      Utils.checkNotNull(input, "input == null");
      return new GetPostsQuery(input);
    }
  }

  public static final class Variables extends Operation.Variables {
    private final @NotNull GetPostsInput input;

    private final transient Map<String, Object> valueMap = new LinkedHashMap<>();

    Variables(@NotNull GetPostsInput input) {
      this.input = input;
      this.valueMap.put("input", input);
    }

    public @NotNull GetPostsInput input() {
      return input;
    }

    @Override
    public Map<String, Object> valueMap() {
      return Collections.unmodifiableMap(valueMap);
    }

    @Override
    public InputFieldMarshaller marshaller() {
      return new InputFieldMarshaller() {
        @Override
        public void marshal(InputFieldWriter writer) throws IOException {
          writer.writeObject("input", input.marshaller());
        }
      };
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  public static class Data implements Operation.Data {
    static final ResponseField[] $responseFields = {
      ResponseField.forList("getPosts", "getPosts", new UnmodifiableMapBuilder<String, Object>(1)
      .put("input", new UnmodifiableMapBuilder<String, Object>(2)
        .put("kind", "Variable")
        .put("variableName", "input")
        .build())
      .build(), false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull List<GetPost> getPosts;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public Data(@NotNull List<GetPost> getPosts) {
      this.getPosts = Utils.checkNotNull(getPosts, "getPosts == null");
    }

    public @NotNull List<GetPost> getPosts() {
      return this.getPosts;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeList($responseFields[0], getPosts, new ResponseWriter.ListWriter() {
            @Override
            public void write(List items, ResponseWriter.ListItemWriter listItemWriter) {
              for (Object item : items) {
                listItemWriter.writeObject(((GetPost) item).marshaller());
              }
            }
          });
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "getPosts=" + getPosts
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return this.getPosts.equals(that.getPosts);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= getPosts.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<Data> {
      final GetPost.Mapper getPostFieldMapper = new GetPost.Mapper();

      @Override
      public Data map(ResponseReader reader) {
        final List<GetPost> getPosts = reader.readList($responseFields[0], new ResponseReader.ListReader<GetPost>() {
          @Override
          public GetPost read(ResponseReader.ListItemReader listItemReader) {
            return listItemReader.readObject(new ResponseReader.ObjectReader<GetPost>() {
              @Override
              public GetPost read(ResponseReader reader) {
                return getPostFieldMapper.map(reader);
              }
            });
          }
        });
        return new Data(getPosts);
      }
    }
  }

  public static class GetPost {
    static final ResponseField[] $responseFields = {
      ResponseField.forString("__typename", "__typename", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("_id", "_id", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("creatorName", "creatorName", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("title", "title", null, true, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("content", "content", null, false, Collections.<ResponseField.Condition>emptyList()),
      ResponseField.forString("boardName", "boardName", null, false, Collections.<ResponseField.Condition>emptyList())
    };

    final @NotNull String __typename;

    final @NotNull String _id;

    final @Nullable String creatorName;

    final @Nullable String title;

    final @NotNull String content;

    final @NotNull String boardName;

    private transient volatile String $toString;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    public GetPost(@NotNull String __typename, @NotNull String _id, @Nullable String creatorName,
        @Nullable String title, @NotNull String content, @NotNull String boardName) {
      this.__typename = Utils.checkNotNull(__typename, "__typename == null");
      this._id = Utils.checkNotNull(_id, "_id == null");
      this.creatorName = creatorName;
      this.title = title;
      this.content = Utils.checkNotNull(content, "content == null");
      this.boardName = Utils.checkNotNull(boardName, "boardName == null");
    }

    public @NotNull String __typename() {
      return this.__typename;
    }

    public @NotNull String _id() {
      return this._id;
    }

    public @Nullable String creatorName() {
      return this.creatorName;
    }

    public @Nullable String title() {
      return this.title;
    }

    public @NotNull String content() {
      return this.content;
    }

    public @NotNull String boardName() {
      return this.boardName;
    }

    @SuppressWarnings({"rawtypes", "unchecked"})
    public ResponseFieldMarshaller marshaller() {
      return new ResponseFieldMarshaller() {
        @Override
        public void marshal(ResponseWriter writer) {
          writer.writeString($responseFields[0], __typename);
          writer.writeString($responseFields[1], _id);
          writer.writeString($responseFields[2], creatorName);
          writer.writeString($responseFields[3], title);
          writer.writeString($responseFields[4], content);
          writer.writeString($responseFields[5], boardName);
        }
      };
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "GetPost{"
          + "__typename=" + __typename + ", "
          + "_id=" + _id + ", "
          + "creatorName=" + creatorName + ", "
          + "title=" + title + ", "
          + "content=" + content + ", "
          + "boardName=" + boardName
          + "}";
      }
      return $toString;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof GetPost) {
        GetPost that = (GetPost) o;
        return this.__typename.equals(that.__typename)
         && this._id.equals(that._id)
         && ((this.creatorName == null) ? (that.creatorName == null) : this.creatorName.equals(that.creatorName))
         && ((this.title == null) ? (that.title == null) : this.title.equals(that.title))
         && this.content.equals(that.content)
         && this.boardName.equals(that.boardName);
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= __typename.hashCode();
        h *= 1000003;
        h ^= _id.hashCode();
        h *= 1000003;
        h ^= (creatorName == null) ? 0 : creatorName.hashCode();
        h *= 1000003;
        h ^= (title == null) ? 0 : title.hashCode();
        h *= 1000003;
        h ^= content.hashCode();
        h *= 1000003;
        h ^= boardName.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    public static final class Mapper implements ResponseFieldMapper<GetPost> {
      @Override
      public GetPost map(ResponseReader reader) {
        final String __typename = reader.readString($responseFields[0]);
        final String _id = reader.readString($responseFields[1]);
        final String creatorName = reader.readString($responseFields[2]);
        final String title = reader.readString($responseFields[3]);
        final String content = reader.readString($responseFields[4]);
        final String boardName = reader.readString($responseFields[5]);
        return new GetPost(__typename, _id, creatorName, title, content, boardName);
      }
    }
  }
}
