// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package edu.brynmawr.cmsc353.webapp;

import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.Utils;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import org.jetbrains.annotations.NotNull;

public final class LoginInput implements InputType {
  private final @NotNull String email;

  private final @NotNull String password;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  LoginInput(@NotNull String email, @NotNull String password) {
    this.email = email;
    this.password = password;
  }

  public @NotNull String email() {
    return this.email;
  }

  public @NotNull String password() {
    return this.password;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public InputFieldMarshaller marshaller() {
    return new InputFieldMarshaller() {
      @Override
      public void marshal(InputFieldWriter writer) throws IOException {
        writer.writeString("email", email);
        writer.writeString("password", password);
      }
    };
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= email.hashCode();
      h *= 1000003;
      h ^= password.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof LoginInput) {
      LoginInput that = (LoginInput) o;
      return this.email.equals(that.email)
       && this.password.equals(that.password);
    }
    return false;
  }

  public static final class Builder {
    private @NotNull String email;

    private @NotNull String password;

    Builder() {
    }

    public Builder email(@NotNull String email) {
      this.email = email;
      return this;
    }

    public Builder password(@NotNull String password) {
      this.password = password;
      return this;
    }

    public LoginInput build() {
      Utils.checkNotNull(email, "email == null");
      Utils.checkNotNull(password, "password == null");
      return new LoginInput(email, password);
    }
  }
}
