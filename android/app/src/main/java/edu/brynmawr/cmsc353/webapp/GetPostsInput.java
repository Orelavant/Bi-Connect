// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package edu.brynmawr.cmsc353.webapp;

import com.apollographql.apollo.api.Input;
import com.apollographql.apollo.api.InputType;
import com.apollographql.apollo.api.internal.InputFieldMarshaller;
import com.apollographql.apollo.api.internal.InputFieldWriter;
import com.apollographql.apollo.api.internal.Utils;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import java.io.IOException;

import type.CustomType;

public final class GetPostsInput implements InputType {
  private final Input<Integer> limit;

  private final Input<Integer> offset;

  private final Input<Object> createdAtBefore;

  private final Input<Object> createdAtAfter;

  private final Input<Object> updatedAtBefore;

  private final Input<Object> updatedAtAfter;

  private final Input<String> creatorName;

  private final Input<String> creatorNameStartsWith;

  private final Input<String> creatorNameEndsWith;

  private final Input<String> creatorNameContains;

  private final Input<String> titleStartsWith;

  private final Input<String> titleEndsWith;

  private final Input<String> titleContains;

  private final Input<String> contentStartsWith;

  private final Input<String> contentEndsWith;

  private final Input<String> contentContains;

  private final Input<Integer> likesLte;

  private final Input<Integer> likesGte;

  private final Input<Integer> dislikesLte;

  private final Input<Integer> dislikesGte;

  private final Input<String> boardNameStartsWith;

  private final Input<String> boardNameEndsWith;

  private final Input<String> boardNameContains;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  GetPostsInput(Input<Integer> limit, Input<Integer> offset, Input<Object> createdAtBefore,
                Input<Object> createdAtAfter, Input<Object> updatedAtBefore, Input<Object> updatedAtAfter,
                Input<String> creatorName, Input<String> creatorNameStartsWith,
                Input<String> creatorNameEndsWith, Input<String> creatorNameContains,
                Input<String> titleStartsWith, Input<String> titleEndsWith, Input<String> titleContains,
                Input<String> contentStartsWith, Input<String> contentEndsWith, Input<String> contentContains,
                Input<Integer> likesLte, Input<Integer> likesGte, Input<Integer> dislikesLte,
                Input<Integer> dislikesGte, Input<String> boardNameStartsWith,
                Input<String> boardNameEndsWith, Input<String> boardNameContains) {
    this.limit = limit;
    this.offset = offset;
    this.createdAtBefore = createdAtBefore;
    this.createdAtAfter = createdAtAfter;
    this.updatedAtBefore = updatedAtBefore;
    this.updatedAtAfter = updatedAtAfter;
    this.creatorName = creatorName;
    this.creatorNameStartsWith = creatorNameStartsWith;
    this.creatorNameEndsWith = creatorNameEndsWith;
    this.creatorNameContains = creatorNameContains;
    this.titleStartsWith = titleStartsWith;
    this.titleEndsWith = titleEndsWith;
    this.titleContains = titleContains;
    this.contentStartsWith = contentStartsWith;
    this.contentEndsWith = contentEndsWith;
    this.contentContains = contentContains;
    this.likesLte = likesLte;
    this.likesGte = likesGte;
    this.dislikesLte = dislikesLte;
    this.dislikesGte = dislikesGte;
    this.boardNameStartsWith = boardNameStartsWith;
    this.boardNameEndsWith = boardNameEndsWith;
    this.boardNameContains = boardNameContains;
  }

  public @Nullable Integer limit() {
    return this.limit.value;
  }

  public @Nullable Integer offset() {
    return this.offset.value;
  }

  public @Nullable Object createdAtBefore() {
    return this.createdAtBefore.value;
  }

  public @Nullable Object createdAtAfter() {
    return this.createdAtAfter.value;
  }

  public @Nullable Object updatedAtBefore() {
    return this.updatedAtBefore.value;
  }

  public @Nullable Object updatedAtAfter() {
    return this.updatedAtAfter.value;
  }

  public @Nullable String creatorName() {
    return this.creatorName.value;
  }

  public @Nullable String creatorNameStartsWith() {
    return this.creatorNameStartsWith.value;
  }

  public @Nullable String creatorNameEndsWith() {
    return this.creatorNameEndsWith.value;
  }

  public @Nullable String creatorNameContains() {
    return this.creatorNameContains.value;
  }

  public @Nullable String titleStartsWith() {
    return this.titleStartsWith.value;
  }

  public @Nullable String titleEndsWith() {
    return this.titleEndsWith.value;
  }

  public @Nullable String titleContains() {
    return this.titleContains.value;
  }

  public @Nullable String contentStartsWith() {
    return this.contentStartsWith.value;
  }

  public @Nullable String contentEndsWith() {
    return this.contentEndsWith.value;
  }

  public @Nullable String contentContains() {
    return this.contentContains.value;
  }

  public @Nullable Integer likesLte() {
    return this.likesLte.value;
  }

  public @Nullable Integer likesGte() {
    return this.likesGte.value;
  }

  public @Nullable Integer dislikesLte() {
    return this.dislikesLte.value;
  }

  public @Nullable Integer dislikesGte() {
    return this.dislikesGte.value;
  }

  public @Nullable String boardNameStartsWith() {
    return this.boardNameStartsWith.value;
  }

  public @Nullable String boardNameEndsWith() {
    return this.boardNameEndsWith.value;
  }

  public @Nullable String boardNameContains() {
    return this.boardNameContains.value;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public InputFieldMarshaller marshaller() {
    return new InputFieldMarshaller() {
      @Override
      public void marshal(InputFieldWriter writer) throws IOException {
        if (limit.defined) {
          writer.writeInt("limit", limit.value);
        }
        if (offset.defined) {
          writer.writeInt("offset", offset.value);
        }
        if (createdAtBefore.defined) {
          writer.writeCustom("createdAtBefore", type.CustomType.DATETIME, createdAtBefore.value != null ? createdAtBefore.value : null);
        }
        if (createdAtAfter.defined) {
          writer.writeCustom("createdAtAfter", type.CustomType.DATETIME, createdAtAfter.value != null ? createdAtAfter.value : null);
        }
        if (updatedAtBefore.defined) {
          writer.writeCustom("updatedAtBefore", type.CustomType.DATETIME, updatedAtBefore.value != null ? updatedAtBefore.value : null);
        }
        if (updatedAtAfter.defined) {
          writer.writeCustom("updatedAtAfter", CustomType.DATETIME, updatedAtAfter.value != null ? updatedAtAfter.value : null);
        }
        if (creatorName.defined) {
          writer.writeString("creatorName", creatorName.value);
        }
        if (creatorNameStartsWith.defined) {
          writer.writeString("creatorNameStartsWith", creatorNameStartsWith.value);
        }
        if (creatorNameEndsWith.defined) {
          writer.writeString("creatorNameEndsWith", creatorNameEndsWith.value);
        }
        if (creatorNameContains.defined) {
          writer.writeString("creatorNameContains", creatorNameContains.value);
        }
        if (titleStartsWith.defined) {
          writer.writeString("titleStartsWith", titleStartsWith.value);
        }
        if (titleEndsWith.defined) {
          writer.writeString("titleEndsWith", titleEndsWith.value);
        }
        if (titleContains.defined) {
          writer.writeString("titleContains", titleContains.value);
        }
        if (contentStartsWith.defined) {
          writer.writeString("contentStartsWith", contentStartsWith.value);
        }
        if (contentEndsWith.defined) {
          writer.writeString("contentEndsWith", contentEndsWith.value);
        }
        if (contentContains.defined) {
          writer.writeString("contentContains", contentContains.value);
        }
        if (likesLte.defined) {
          writer.writeInt("likesLte", likesLte.value);
        }
        if (likesGte.defined) {
          writer.writeInt("likesGte", likesGte.value);
        }
        if (dislikesLte.defined) {
          writer.writeInt("dislikesLte", dislikesLte.value);
        }
        if (dislikesGte.defined) {
          writer.writeInt("dislikesGte", dislikesGte.value);
        }
        if (boardNameStartsWith.defined) {
          writer.writeString("boardNameStartsWith", boardNameStartsWith.value);
        }
        if (boardNameEndsWith.defined) {
          writer.writeString("boardNameEndsWith", boardNameEndsWith.value);
        }
        if (boardNameContains.defined) {
          writer.writeString("boardNameContains", boardNameContains.value);
        }
      }
    };
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= limit.hashCode();
      h *= 1000003;
      h ^= offset.hashCode();
      h *= 1000003;
      h ^= createdAtBefore.hashCode();
      h *= 1000003;
      h ^= createdAtAfter.hashCode();
      h *= 1000003;
      h ^= updatedAtBefore.hashCode();
      h *= 1000003;
      h ^= updatedAtAfter.hashCode();
      h *= 1000003;
      h ^= creatorName.hashCode();
      h *= 1000003;
      h ^= creatorNameStartsWith.hashCode();
      h *= 1000003;
      h ^= creatorNameEndsWith.hashCode();
      h *= 1000003;
      h ^= creatorNameContains.hashCode();
      h *= 1000003;
      h ^= titleStartsWith.hashCode();
      h *= 1000003;
      h ^= titleEndsWith.hashCode();
      h *= 1000003;
      h ^= titleContains.hashCode();
      h *= 1000003;
      h ^= contentStartsWith.hashCode();
      h *= 1000003;
      h ^= contentEndsWith.hashCode();
      h *= 1000003;
      h ^= contentContains.hashCode();
      h *= 1000003;
      h ^= likesLte.hashCode();
      h *= 1000003;
      h ^= likesGte.hashCode();
      h *= 1000003;
      h ^= dislikesLte.hashCode();
      h *= 1000003;
      h ^= dislikesGte.hashCode();
      h *= 1000003;
      h ^= boardNameStartsWith.hashCode();
      h *= 1000003;
      h ^= boardNameEndsWith.hashCode();
      h *= 1000003;
      h ^= boardNameContains.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof GetPostsInput) {
      GetPostsInput that = (GetPostsInput) o;
      return this.limit.equals(that.limit)
       && this.offset.equals(that.offset)
       && this.createdAtBefore.equals(that.createdAtBefore)
       && this.createdAtAfter.equals(that.createdAtAfter)
       && this.updatedAtBefore.equals(that.updatedAtBefore)
       && this.updatedAtAfter.equals(that.updatedAtAfter)
       && this.creatorName.equals(that.creatorName)
       && this.creatorNameStartsWith.equals(that.creatorNameStartsWith)
       && this.creatorNameEndsWith.equals(that.creatorNameEndsWith)
       && this.creatorNameContains.equals(that.creatorNameContains)
       && this.titleStartsWith.equals(that.titleStartsWith)
       && this.titleEndsWith.equals(that.titleEndsWith)
       && this.titleContains.equals(that.titleContains)
       && this.contentStartsWith.equals(that.contentStartsWith)
       && this.contentEndsWith.equals(that.contentEndsWith)
       && this.contentContains.equals(that.contentContains)
       && this.likesLte.equals(that.likesLte)
       && this.likesGte.equals(that.likesGte)
       && this.dislikesLte.equals(that.dislikesLte)
       && this.dislikesGte.equals(that.dislikesGte)
       && this.boardNameStartsWith.equals(that.boardNameStartsWith)
       && this.boardNameEndsWith.equals(that.boardNameEndsWith)
       && this.boardNameContains.equals(that.boardNameContains);
    }
    return false;
  }

  public static final class Builder {
    private Input<Integer> limit = Input.absent();

    private Input<Integer> offset = Input.absent();

    private Input<Object> createdAtBefore = Input.absent();

    private Input<Object> createdAtAfter = Input.absent();

    private Input<Object> updatedAtBefore = Input.absent();

    private Input<Object> updatedAtAfter = Input.absent();

    private Input<String> creatorName = Input.absent();

    private Input<String> creatorNameStartsWith = Input.absent();

    private Input<String> creatorNameEndsWith = Input.absent();

    private Input<String> creatorNameContains = Input.absent();

    private Input<String> titleStartsWith = Input.absent();

    private Input<String> titleEndsWith = Input.absent();

    private Input<String> titleContains = Input.absent();

    private Input<String> contentStartsWith = Input.absent();

    private Input<String> contentEndsWith = Input.absent();

    private Input<String> contentContains = Input.absent();

    private Input<Integer> likesLte = Input.absent();

    private Input<Integer> likesGte = Input.absent();

    private Input<Integer> dislikesLte = Input.absent();

    private Input<Integer> dislikesGte = Input.absent();

    private Input<String> boardNameStartsWith = Input.absent();

    private Input<String> boardNameEndsWith = Input.absent();

    private Input<String> boardNameContains = Input.absent();

    Builder() {
    }

    public Builder limit(@Nullable Integer limit) {
      this.limit = Input.fromNullable(limit);
      return this;
    }

    public Builder offset(@Nullable Integer offset) {
      this.offset = Input.fromNullable(offset);
      return this;
    }

    public Builder createdAtBefore(@Nullable Object createdAtBefore) {
      this.createdAtBefore = Input.fromNullable(createdAtBefore);
      return this;
    }

    public Builder createdAtAfter(@Nullable Object createdAtAfter) {
      this.createdAtAfter = Input.fromNullable(createdAtAfter);
      return this;
    }

    public Builder updatedAtBefore(@Nullable Object updatedAtBefore) {
      this.updatedAtBefore = Input.fromNullable(updatedAtBefore);
      return this;
    }

    public Builder updatedAtAfter(@Nullable Object updatedAtAfter) {
      this.updatedAtAfter = Input.fromNullable(updatedAtAfter);
      return this;
    }

    public Builder creatorName(@Nullable String creatorName) {
      this.creatorName = Input.fromNullable(creatorName);
      return this;
    }

    public Builder creatorNameStartsWith(@Nullable String creatorNameStartsWith) {
      this.creatorNameStartsWith = Input.fromNullable(creatorNameStartsWith);
      return this;
    }

    public Builder creatorNameEndsWith(@Nullable String creatorNameEndsWith) {
      this.creatorNameEndsWith = Input.fromNullable(creatorNameEndsWith);
      return this;
    }

    public Builder creatorNameContains(@Nullable String creatorNameContains) {
      this.creatorNameContains = Input.fromNullable(creatorNameContains);
      return this;
    }

    public Builder titleStartsWith(@Nullable String titleStartsWith) {
      this.titleStartsWith = Input.fromNullable(titleStartsWith);
      return this;
    }

    public Builder titleEndsWith(@Nullable String titleEndsWith) {
      this.titleEndsWith = Input.fromNullable(titleEndsWith);
      return this;
    }

    public Builder titleContains(@Nullable String titleContains) {
      this.titleContains = Input.fromNullable(titleContains);
      return this;
    }

    public Builder contentStartsWith(@Nullable String contentStartsWith) {
      this.contentStartsWith = Input.fromNullable(contentStartsWith);
      return this;
    }

    public Builder contentEndsWith(@Nullable String contentEndsWith) {
      this.contentEndsWith = Input.fromNullable(contentEndsWith);
      return this;
    }

    public Builder contentContains(@Nullable String contentContains) {
      this.contentContains = Input.fromNullable(contentContains);
      return this;
    }

    public Builder likesLte(@Nullable Integer likesLte) {
      this.likesLte = Input.fromNullable(likesLte);
      return this;
    }

    public Builder likesGte(@Nullable Integer likesGte) {
      this.likesGte = Input.fromNullable(likesGte);
      return this;
    }

    public Builder dislikesLte(@Nullable Integer dislikesLte) {
      this.dislikesLte = Input.fromNullable(dislikesLte);
      return this;
    }

    public Builder dislikesGte(@Nullable Integer dislikesGte) {
      this.dislikesGte = Input.fromNullable(dislikesGte);
      return this;
    }

    public Builder boardNameStartsWith(@Nullable String boardNameStartsWith) {
      this.boardNameStartsWith = Input.fromNullable(boardNameStartsWith);
      return this;
    }

    public Builder boardNameEndsWith(@Nullable String boardNameEndsWith) {
      this.boardNameEndsWith = Input.fromNullable(boardNameEndsWith);
      return this;
    }

    public Builder boardNameContains(@Nullable String boardNameContains) {
      this.boardNameContains = Input.fromNullable(boardNameContains);
      return this;
    }

    public Builder limitInput(@NotNull Input<Integer> limit) {
      this.limit = Utils.checkNotNull(limit, "limit == null");
      return this;
    }

    public Builder offsetInput(@NotNull Input<Integer> offset) {
      this.offset = Utils.checkNotNull(offset, "offset == null");
      return this;
    }

    public Builder createdAtBeforeInput(@NotNull Input<Object> createdAtBefore) {
      this.createdAtBefore = Utils.checkNotNull(createdAtBefore, "createdAtBefore == null");
      return this;
    }

    public Builder createdAtAfterInput(@NotNull Input<Object> createdAtAfter) {
      this.createdAtAfter = Utils.checkNotNull(createdAtAfter, "createdAtAfter == null");
      return this;
    }

    public Builder updatedAtBeforeInput(@NotNull Input<Object> updatedAtBefore) {
      this.updatedAtBefore = Utils.checkNotNull(updatedAtBefore, "updatedAtBefore == null");
      return this;
    }

    public Builder updatedAtAfterInput(@NotNull Input<Object> updatedAtAfter) {
      this.updatedAtAfter = Utils.checkNotNull(updatedAtAfter, "updatedAtAfter == null");
      return this;
    }

    public Builder creatorNameInput(@NotNull Input<String> creatorName) {
      this.creatorName = Utils.checkNotNull(creatorName, "creatorName == null");
      return this;
    }

    public Builder creatorNameStartsWithInput(@NotNull Input<String> creatorNameStartsWith) {
      this.creatorNameStartsWith = Utils.checkNotNull(creatorNameStartsWith, "creatorNameStartsWith == null");
      return this;
    }

    public Builder creatorNameEndsWithInput(@NotNull Input<String> creatorNameEndsWith) {
      this.creatorNameEndsWith = Utils.checkNotNull(creatorNameEndsWith, "creatorNameEndsWith == null");
      return this;
    }

    public Builder creatorNameContainsInput(@NotNull Input<String> creatorNameContains) {
      this.creatorNameContains = Utils.checkNotNull(creatorNameContains, "creatorNameContains == null");
      return this;
    }

    public Builder titleStartsWithInput(@NotNull Input<String> titleStartsWith) {
      this.titleStartsWith = Utils.checkNotNull(titleStartsWith, "titleStartsWith == null");
      return this;
    }

    public Builder titleEndsWithInput(@NotNull Input<String> titleEndsWith) {
      this.titleEndsWith = Utils.checkNotNull(titleEndsWith, "titleEndsWith == null");
      return this;
    }

    public Builder titleContainsInput(@NotNull Input<String> titleContains) {
      this.titleContains = Utils.checkNotNull(titleContains, "titleContains == null");
      return this;
    }

    public Builder contentStartsWithInput(@NotNull Input<String> contentStartsWith) {
      this.contentStartsWith = Utils.checkNotNull(contentStartsWith, "contentStartsWith == null");
      return this;
    }

    public Builder contentEndsWithInput(@NotNull Input<String> contentEndsWith) {
      this.contentEndsWith = Utils.checkNotNull(contentEndsWith, "contentEndsWith == null");
      return this;
    }

    public Builder contentContainsInput(@NotNull Input<String> contentContains) {
      this.contentContains = Utils.checkNotNull(contentContains, "contentContains == null");
      return this;
    }

    public Builder likesLteInput(@NotNull Input<Integer> likesLte) {
      this.likesLte = Utils.checkNotNull(likesLte, "likesLte == null");
      return this;
    }

    public Builder likesGteInput(@NotNull Input<Integer> likesGte) {
      this.likesGte = Utils.checkNotNull(likesGte, "likesGte == null");
      return this;
    }

    public Builder dislikesLteInput(@NotNull Input<Integer> dislikesLte) {
      this.dislikesLte = Utils.checkNotNull(dislikesLte, "dislikesLte == null");
      return this;
    }

    public Builder dislikesGteInput(@NotNull Input<Integer> dislikesGte) {
      this.dislikesGte = Utils.checkNotNull(dislikesGte, "dislikesGte == null");
      return this;
    }

    public Builder boardNameStartsWithInput(@NotNull Input<String> boardNameStartsWith) {
      this.boardNameStartsWith = Utils.checkNotNull(boardNameStartsWith, "boardNameStartsWith == null");
      return this;
    }

    public Builder boardNameEndsWithInput(@NotNull Input<String> boardNameEndsWith) {
      this.boardNameEndsWith = Utils.checkNotNull(boardNameEndsWith, "boardNameEndsWith == null");
      return this;
    }

    public Builder boardNameContainsInput(@NotNull Input<String> boardNameContains) {
      this.boardNameContains = Utils.checkNotNull(boardNameContains, "boardNameContains == null");
      return this;
    }

    public GetPostsInput build() {
      return new GetPostsInput(limit, offset, createdAtBefore, createdAtAfter, updatedAtBefore, updatedAtAfter, creatorName, creatorNameStartsWith, creatorNameEndsWith, creatorNameContains, titleStartsWith, titleEndsWith, titleContains, contentStartsWith, contentEndsWith, contentContains, likesLte, likesGte, dislikesLte, dislikesGte, boardNameStartsWith, boardNameEndsWith, boardNameContains);
    }
  }
}
